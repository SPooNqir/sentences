// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.6
// source: sentences.proto

package sentences

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	groups "github.com/slavayssiere-spoon/groups"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: gorm:"-"
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"-"`
	Ask   string `protobuf:"bytes,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Resp  string `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
	Lang  string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Owner string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	// @inject_tag: gorm:"-"
	Groups []*SentenceGroup `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty" gorm:"-"`
	// @inject_tag: gorm:"-"
	CreateDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createDate,proto3" json:"createDate,omitempty" gorm:"-"`
	Source     string                 `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	CreateFrom string                 `protobuf:"bytes,9,opt,name=createFrom,proto3" json:"createFrom,omitempty"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentences_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_sentences_proto_rawDescGZIP(), []int{0}
}

func (x *Sentence) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sentence) GetAsk() string {
	if x != nil {
		return x.Ask
	}
	return ""
}

func (x *Sentence) GetResp() string {
	if x != nil {
		return x.Resp
	}
	return ""
}

func (x *Sentence) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Sentence) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Sentence) GetGroups() []*SentenceGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Sentence) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *Sentence) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Sentence) GetCreateFrom() string {
	if x != nil {
		return x.CreateFrom
	}
	return ""
}

type SentenceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: gorm:"-"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"-"`
	// @inject_tag: gorm:"index:sentenceid"
	Sentenceid uint64 `protobuf:"varint,2,opt,name=sentenceid,proto3" json:"sentenceid,omitempty" gorm:"index:sentenceid"`
	Moderate   bool   `protobuf:"varint,3,opt,name=moderate,proto3" json:"moderate,omitempty"`
	Enabled    bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// @inject_tag: gorm:"index:groupid"
	Groupid uint64 `protobuf:"varint,5,opt,name=groupid,proto3" json:"groupid,omitempty" gorm:"index:groupid"`
	// @inject_tag: gorm:"-"
	Group        *groups.Group `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty" gorm:"-"`
	Moderator    string        `protobuf:"bytes,7,opt,name=moderator,proto3" json:"moderator,omitempty"`
	Used         uint64        `protobuf:"varint,8,opt,name=used,proto3" json:"used,omitempty"`
	Good         uint64        `protobuf:"varint,9,opt,name=good,proto3" json:"good,omitempty"`
	Bad          uint64        `protobuf:"varint,10,opt,name=bad,proto3" json:"bad,omitempty"`
	Localisation string        `protobuf:"bytes,11,opt,name=localisation,proto3" json:"localisation,omitempty"`
	Privacy      string        `protobuf:"bytes,12,opt,name=privacy,proto3" json:"privacy,omitempty"` // PRIVATE or PROTECTED
	Owner        string        `protobuf:"bytes,13,opt,name=owner,proto3" json:"owner,omitempty"`
	Source       string        `protobuf:"bytes,14,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *SentenceGroup) Reset() {
	*x = SentenceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentences_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentenceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceGroup) ProtoMessage() {}

func (x *SentenceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceGroup.ProtoReflect.Descriptor instead.
func (*SentenceGroup) Descriptor() ([]byte, []int) {
	return file_sentences_proto_rawDescGZIP(), []int{1}
}

func (x *SentenceGroup) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentenceGroup) GetSentenceid() uint64 {
	if x != nil {
		return x.Sentenceid
	}
	return 0
}

func (x *SentenceGroup) GetModerate() bool {
	if x != nil {
		return x.Moderate
	}
	return false
}

func (x *SentenceGroup) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SentenceGroup) GetGroupid() uint64 {
	if x != nil {
		return x.Groupid
	}
	return 0
}

func (x *SentenceGroup) GetGroup() *groups.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *SentenceGroup) GetModerator() string {
	if x != nil {
		return x.Moderator
	}
	return ""
}

func (x *SentenceGroup) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *SentenceGroup) GetGood() uint64 {
	if x != nil {
		return x.Good
	}
	return 0
}

func (x *SentenceGroup) GetBad() uint64 {
	if x != nil {
		return x.Bad
	}
	return 0
}

func (x *SentenceGroup) GetLocalisation() string {
	if x != nil {
		return x.Localisation
	}
	return ""
}

func (x *SentenceGroup) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *SentenceGroup) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SentenceGroup) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Sentences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List   []*Sentence `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Limit  uint64      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Max    uint64      `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Sentences) Reset() {
	*x = Sentences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sentences_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentences) ProtoMessage() {}

func (x *Sentences) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentences.ProtoReflect.Descriptor instead.
func (*Sentences) Descriptor() ([]byte, []int) {
	return file_sentences_proto_rawDescGZIP(), []int{2}
}

func (x *Sentences) GetList() []*Sentence {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *Sentences) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Sentences) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Sentences) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

var File_sentences_proto protoreflect.FileDescriptor

var file_sentences_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0xf8, 0x02, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x62, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x74, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x32, 0xa8, 0x08,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x14, 0x2e, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x7b, 0x6c,
	0x61, 0x6e, 0x67, 0x7d, 0x2f, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x61, 0x73, 0x6b, 0x7d, 0x12, 0x49,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x1a, 0x3f,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64,
	0x2f, 0x7b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2f, 0x7b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x7d, 0x12,
	0x71, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x1a, 0x32,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64,
	0x2f, 0x7b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x7a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x18,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x39, 0x1a, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x78,
	0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x1a, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x7d, 0x2f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x6f, 0x74, 0x65, 0x2f, 0x62, 0x61, 0x64, 0x42, 0xc5, 0x04, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6c, 0x61, 0x76, 0x61, 0x79, 0x73, 0x73,
	0x69, 0x65, 0x72, 0x65, 0x2d, 0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x92, 0x41, 0x98, 0x04, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6f,
	0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x57,
	0x53, 0x22, 0x68, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x20, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x70, 0x6f, 0x6f, 0x6e, 0x51,
	0x49, 0x52, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x1e, 0x73, 0x65, 0x62,
	0x61, 0x73, 0x74, 0x69, 0x65, 0x6e, 0x2e, 0x6c, 0x61, 0x76, 0x61, 0x79, 0x73, 0x73, 0x69, 0x65,
	0x72, 0x65, 0x40, 0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x2e, 0x61, 0x69, 0x32, 0x05, 0x30, 0x2e, 0x30,
	0x2e, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x3b, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x57, 0x0a, 0x03, 0x34, 0x31, 0x38,
	0x12, 0x50, 0x0a, 0x0d, 0x49, 0x27, 0x6d, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x70, 0x6f, 0x74,
	0x2e, 0x12, 0x3f, 0x0a, 0x3d, 0x1a, 0x3b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x45, 0x6e,
	0x75, 0x6d, 0x5a, 0x23, 0x0a, 0x21, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x72, 0x45, 0x0a, 0x0d, 0x6c, 0x69, 0x6e,
	0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x70, 0x6f, 0x6f, 0x6e, 0x51, 0x49, 0x52, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sentences_proto_rawDescOnce sync.Once
	file_sentences_proto_rawDescData = file_sentences_proto_rawDesc
)

func file_sentences_proto_rawDescGZIP() []byte {
	file_sentences_proto_rawDescOnce.Do(func() {
		file_sentences_proto_rawDescData = protoimpl.X.CompressGZIP(file_sentences_proto_rawDescData)
	})
	return file_sentences_proto_rawDescData
}

var file_sentences_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sentences_proto_goTypes = []interface{}{
	(*Sentence)(nil),              // 0: sentences.Sentence
	(*SentenceGroup)(nil),         // 1: sentences.SentenceGroup
	(*Sentences)(nil),             // 2: sentences.Sentences
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*groups.Group)(nil),          // 4: groups.Group
}
var file_sentences_proto_depIdxs = []int32{
	1,  // 0: sentences.Sentence.groups:type_name -> sentences.SentenceGroup
	3,  // 1: sentences.Sentence.createDate:type_name -> google.protobuf.Timestamp
	4,  // 2: sentences.SentenceGroup.group:type_name -> groups.Group
	0,  // 3: sentences.Sentences.list:type_name -> sentences.Sentence
	2,  // 4: sentences.sentences.GetAll:input_type -> sentences.Sentences
	0,  // 5: sentences.sentences.Get:input_type -> sentences.Sentence
	0,  // 6: sentences.sentences.GetResponse:input_type -> sentences.Sentence
	0,  // 7: sentences.sentences.Add:input_type -> sentences.Sentence
	1,  // 8: sentences.sentences.AddSentenceGroup:input_type -> sentences.SentenceGroup
	1,  // 9: sentences.sentences.DeleteSentenceGroup:input_type -> sentences.SentenceGroup
	1,  // 10: sentences.sentences.Moderate:input_type -> sentences.SentenceGroup
	1,  // 11: sentences.sentences.Used:input_type -> sentences.SentenceGroup
	1,  // 12: sentences.sentences.VoteGood:input_type -> sentences.SentenceGroup
	1,  // 13: sentences.sentences.VoteBad:input_type -> sentences.SentenceGroup
	2,  // 14: sentences.sentences.GetAll:output_type -> sentences.Sentences
	0,  // 15: sentences.sentences.Get:output_type -> sentences.Sentence
	0,  // 16: sentences.sentences.GetResponse:output_type -> sentences.Sentence
	0,  // 17: sentences.sentences.Add:output_type -> sentences.Sentence
	0,  // 18: sentences.sentences.AddSentenceGroup:output_type -> sentences.Sentence
	0,  // 19: sentences.sentences.DeleteSentenceGroup:output_type -> sentences.Sentence
	0,  // 20: sentences.sentences.Moderate:output_type -> sentences.Sentence
	0,  // 21: sentences.sentences.Used:output_type -> sentences.Sentence
	0,  // 22: sentences.sentences.VoteGood:output_type -> sentences.Sentence
	0,  // 23: sentences.sentences.VoteBad:output_type -> sentences.Sentence
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_sentences_proto_init() }
func file_sentences_proto_init() {
	if File_sentences_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sentences_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sentences_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentenceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sentences_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sentences_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentences_proto_goTypes,
		DependencyIndexes: file_sentences_proto_depIdxs,
		MessageInfos:      file_sentences_proto_msgTypes,
	}.Build()
	File_sentences_proto = out.File
	file_sentences_proto_rawDesc = nil
	file_sentences_proto_goTypes = nil
	file_sentences_proto_depIdxs = nil
}
