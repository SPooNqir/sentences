syntax = "proto3";

package sentences;

option go_package = "github.com/slavayssiere-spoon/sentences";

import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "groups.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Spoon - Sentences WS";
		version: "0.0.1";
		contact: {
			name: "Spoon Cloud Team";
			url: "https://gitlab.com/SpoonQIR/Cloud/services/sentences";
			email: "sebastien.lavayssiere@spoon.ai";
		};
	};
	// Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://gitlab.com/SpoonQIR/Cloud/services/sentences";
		description: "link for docs";
	}
	schemes: HTTPS;
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.internal.proto.examplepb.NumericEnum";
				}
			}
		}
	}
};

message Sentence {
	// @inject_tag: gorm:"-"
	uint64 id = 1;
	string ask = 2;
	string resp = 3;
	string lang = 4;
	string owner = 5;

	// @inject_tag: gorm:"-"
	repeated SentenceGroup groups = 6;

	// @inject_tag: gorm:"-"
	google.protobuf.Timestamp createDate = 7;

	string source = 8;
	string createFrom = 9;
}


message SentenceGroup {
	// @inject_tag: gorm:"-"
	uint64 id = 1;
	// @inject_tag: gorm:"index:sentenceid"
	uint64 sentenceid = 2;
	bool moderate = 3;
	bool enabled = 4;


	// @inject_tag: gorm:"index:groupid"
	uint64 groupid = 5;

	// @inject_tag: gorm:"-"
	groups.Group group = 6;

	string moderator = 7;

	uint64 used = 8;
	uint64 good = 9;
	uint64 bad = 10;

	string localisation = 11;
	string privacy = 12; // PRIVATE or PROTECTED

	string owner = 13;
	string source = 14;
}

message Sentences {
	repeated Sentence list = 1;
	uint64 limit = 2;
	uint64 offset = 3;
	uint64 max = 4;
}

service sentences {
	rpc GetAll (Sentences) returns (Sentences) {
		option (google.api.http) = {
			get: "/v1/sentences"
		};
	}

	rpc Get (Sentence) returns (Sentence) {
		option (google.api.http) = {
			get: "/v1/sentences/id/{id}"
		};
	}

	rpc GetResponse (Sentence) returns (Sentence) {
		option (google.api.http) = {
			get: "/v1/sentences/lang/{lang}/ask/{ask}"
		};
	}


	rpc Add (Sentence) returns (Sentence) {
		option (google.api.http) = {
			post: "/v1/sentences"
			body: "*"
		};
	}

	rpc AddSentenceGroup (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			post: "/v1/sentences/groups"
			body: "*"
		};
	}

	rpc DeleteSentenceGroup (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			delete: "/v1/sentences/id/{sentenceid}/group/{groupid}"
		};
	}

	rpc Moderate (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			put: "/v1/sentences/id/{sentenceid}/group/{groupid}/enabled/{enabled}"
		};
	}

	rpc Used (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			put: "/v1/sentences/id/{sentenceid}/group/{groupid}/used"
		};
	}

	rpc VoteGood (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			put: "/v1/sentences/id/{sentenceid}/group/{groupid}/vote/good"
		};
	}

	rpc VoteBad (SentenceGroup) returns (Sentence) {
		option (google.api.http) = {
			put: "/v1/sentences/id/{sentenceid}/group/{groupid}/vote/bad"
		};
	}
}
